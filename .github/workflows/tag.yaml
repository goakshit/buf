name: tag
on:
  push: 
    branches: 
      - 'main'
    paths:
      - '**.proto'

permissions:
  actions: write
  contents: write

jobs:
  tag:
    name: tag-commit
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag_version.outputs.new_tag }}
      version: ${{ steps.tag_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_release_rules: 'feat:minor,enhancement:minor,fix:patch,hotfix:patch,breaking:major,perf:major'
  
  release-ruby:
    needs: tag
    name: release-ruby
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{needs.tag.outputs.tag}}
      - name: create gemspec
        run: |
          cat << 'EOL' > gen/ruby/proto.gemspec
          Gem::Specification.new do |spec|
            spec.name          = "proto"
            spec.date          = Time.now.strftime('%Y-%m-%d')
            spec.version       = "${{needs.tag.outputs.version}}"
            spec.email         = ["akshitdhar@live.com"]
            spec.author        = "goakshit"
            spec.summary       = "Compiled protobuf files"

            spec.metadata['github_repo']     = "https://github.com/goakshit/buf"
            spec.metadata['source_code_uri'] = "https://github.com/goakshit/buf"

            spec.files         = Dir.chdir(File.expand_path('..', __FILE__)) do
              `git ls-files -z`.split("\x0").reject { |f| f.match(%r{^(test|spec|features)/}) }
            end
            spec.bindir        = "exe"
            spec.executables   = spec.files.grep(%r{^exe/}) { |f| File.basename(f) }
            spec.require_paths = ["lib"]
            spec.required_ruby_version = ">= 2.6.0"
          end
          EOL

      - name: create proto.rb
        run: |
          cat << 'EOL' > gen/ruby/lib/proto.rb
          Dir[File.expand_path(File.join(File.dirname(File.absolute_path(__FILE__)), ".")) + "/**/*.rb"].each do |file|
            print file
            require file
          end
          EOL
      
      - name: build gem
        run: |
          git add -f gen/ruby

          sudo apt-get install -y curl gnupg build-essential
          curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
          \curl -sSL https://get.rvm.io | bash -s stable
          source ~/.rvm/scripts/rvm

          rvm install ruby-3.1.1
          rvm --default use ruby-3.1.1

          cd gen/ruby
          gem build proto.gemspec

      - name: release
        run: |
          mkdir -p ~/.gem
          touch ~/.gem/credentials
          chmod 600 ~/.gem/credentials
          echo ":github: Bearer ${{secrets.GITHUB_TOKEN}}" >> ~/.gem/credentials

          gem push --key github --host "https://rubygems.pkg.github.com/goakshit" gen/ruby/proto-${{needs.tag.outputs.version}}.gem

  release-python:
    needs: tag
    name: release-python
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{needs.tag.outputs.tag}}
      - name: install poetry
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.2.0 python3 -

      - name: create package files
        run: |
          cd gen/python/proto

          # Create __init__.py in every child and add import statements in every leaf __init__.py files
          for d in $(find . -type d | grep -v '^\.$'); do
          pushd $d
          subdircount=$(find . -maxdepth 1 -type d | wc -l)
          if [[ "$subdircount" -eq 1 ]]
          then
          cat << 'EOL' >> __init__.py
          from os.path import dirname, basename, isfile, join
          import glob
          modules = glob.glob(join(dirname(__file__), '*.py'))
          __all__ = [ basename(f)[:-3] for f in modules if isfile(f) and not f.endswith('__init__.py')]
          from . import *
          EOL
          else
          touch __init__.py
          fi
          popd
          done

      - name: build package
        run: |
          cd gen/python

          # Initialize poetry package
          poetry init -n

          cat << 'EOL' > pyproject.toml
          [tool.poetry]
          name = "proto"
          version = "${{needs.tag.outputs.version}}"
          description = "Compiled protobuf"
          authors = ["goakshit <dharakshit@outlook.com>"]

          [tool.poetry.dependencies]
          python = "^3.10"
          protobuf = "^3.10"

          [build-system]
          requires = ["poetry-core"]
          build-backend = "poetry.core.masonry.api"
          EOL

          poetry install
          poetry build

      - name: publish package
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          export CODEARTIFACT_REPOSITORY=mondu_pypi
          export CODEARTIFACT_DOMAIN=artifact-stage-mondu-ai
          export CODEARTIFACT_OWNER=335270991587

          export CODEARTIFACT_USER=aws
          export CODEARTIFACT_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --region eu-central-1 --domain ${CODEARTIFACT_DOMAIN} --domain-owner ${CODEARTIFACT_OWNER} --repository ${CODEARTIFACT_REPOSITORY} --format pypi --query repositoryEndpoint --output text`
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --region eu-central-1 --domain ${CODEARTIFACT_DOMAIN}  --domain-owner ${CODEARTIFACT_OWNER} --query authorizationToken --output text`

          poetry config repositories.aws_ca $CODEARTIFACT_REPOSITORY_URL
          poetry config http-basic.aws_ca $CODEARTIFACT_USER $CODEARTIFACT_AUTH_TOKEN

          poetry publish -r aws_ca
